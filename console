<?php

use Chamilo\Libraries\Architecture\ErrorHandler\ErrorHandler;
use Chamilo\Libraries\Architecture\ErrorHandler\ExceptionLogger\ExceptionLoggerFactory;
use Chamilo\Libraries\Architecture\ErrorHandler\ExceptionLogger\ExceptionLoggerInterface;
use Chamilo\Libraries\DependencyInjection\DependencyInjectionContainerBuilder;
use Chamilo\Libraries\Format\Theme;
use Chamilo\Libraries\Platform\Translation;


$autoloader = require __DIR__ . '/vendor/autoload.php';
\Doctrine\Common\Annotations\AnnotationRegistry::registerLoader([$autoloader, 'loadClass']);

$container = DependencyInjectionContainerBuilder::getInstance()->createContainer();
$container->get('chamilo.libraries.architecture.bootstrap.bootstrap')->setup();

/** @var \Chamilo\Configuration\Service\ConfigurationConsulter $configurationConsulter */
$configurationConsulter = $container->get('chamilo.configuration.service.configuration_consulter');

$exceptionLoggerFactory = new ExceptionLoggerFactory($configurationConsulter);
$exceptionLogger = $exceptionLoggerFactory->createExceptionLogger();

try
{
    /** @var \Symfony\Component\Console\Application $console */
    $console = $container->get('chamilo.libraries.console');
    $console->setHelperSet($container->get('chamilo.libraries.console.helper_set'));
    $console->setCatchExceptions(false);
    $console->run();
}
catch(\Throwable $ex)
{
    $exceptionLogger->logException($ex, ExceptionLoggerInterface::EXCEPTION_LEVEL_FATAL_ERROR);
    throw $ex;
}