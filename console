<?php

use Chamilo\Configuration\Service\ConfigurationConsulter;
use Chamilo\Libraries\Architecture\Bootstrap\Bootstrap;
use Chamilo\Libraries\Architecture\ErrorHandler\ExceptionLogger\ExceptionLoggerFactory;
use Chamilo\Libraries\Architecture\ErrorHandler\ExceptionLogger\ExceptionLoggerInterface;
use Chamilo\Libraries\Console;
use Chamilo\Libraries\DependencyInjection\DependencyInjectionContainerBuilder;
use Chamilo\Libraries\Platform\Session\SessionUtilities;
use Doctrine\Common\Annotations\AnnotationRegistry;

$autoloader = require __DIR__ . '/vendor/autoload.php';
AnnotationRegistry::registerLoader([$autoloader, 'loadClass']);

$container = DependencyInjectionContainerBuilder::getInstance()->createContainer();
$container->get(Bootstrap::class)->setup();

/** @var \Chamilo\Configuration\Service\ConfigurationConsulter $configurationConsulter */
$configurationConsulter = $container->get(ConfigurationConsulter::class);
/** @var \Chamilo\Libraries\Platform\Session\SessionUtilities */
$sessionUtilities = $container->get(SessionUtilities::class);

$exceptionLoggerFactory = new ExceptionLoggerFactory($configurationConsulter, $sessionUtilities);
$exceptionLogger = $exceptionLoggerFactory->createExceptionLogger();

try
{
    /** @var \Symfony\Component\Console\Application $console */
    $console = $container->get('Chamilo\Libraries\Console');
    $console->setHelperSet($container->get('Chamilo\Libraries\Console\HelperSet'));
    $console->setCatchExceptions(false);
    $console->run();
}
catch (Throwable $ex)
{
    $exceptionLogger->logException($ex, ExceptionLoggerInterface::EXCEPTION_LEVEL_FATAL_ERROR);
    throw $ex;
}