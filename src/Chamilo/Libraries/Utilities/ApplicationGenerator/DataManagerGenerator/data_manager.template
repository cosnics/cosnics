<?php

namespace {NAMESPACE};

use common\libraries\Utilities;
use common\libraries\Configuration;

/**
 *	This is a skeleton for a data manager for the {APPLICATION_NAME} Application.
 *	Data managers must extend this class and implement its abstract methods.
 *
 *  @author Sven Vanpoucke
 *	@author {AUTHOR}
 */
class {APPLICATION_NAME}DataManager
{
    /**
     * Instance of this class for the singleton pattern.
     */
    private static $instance;

    /**
     * Uses a singleton pattern and a factory pattern to return the data
     * manager. The configuration determines which data manager class is to
     * be instantiated.
     * @return {APPLICATION_NAME}DataManager The data manager.
	 */
    static function get_instance()
    {
        if (!isset (self :: $instance))
	{
            $type = Configuration :: get_instance()->get_parameter('general', 'data_manager');
            require_once dirname(__FILE__) . '/data_manager/' . Utilities :: camelcase_to_underscores($type) . '.class.php';
            $class = __NAMESPACE__ . '\\' . Utilities :: underscores_to_camelcase($type) . '{APPLICATION_NAME}DataManager';
            self :: $instance = new $class();
	}
        
	return self :: $instance;
    }
}
?>