{"remainingRequest":"D:\\Sites\\branch\\node_modules\\babel-loader\\lib\\index.js!D:\\Sites\\branch\\node_modules\\ts-loader\\index.js??ref--13-2!D:\\Sites\\branch\\src\\Chamilo\\Libraries\\VuePlugins\\src\\Plugins\\ScoreRubric\\Domain\\Cluster.ts","dependencies":[{"path":"D:\\Sites\\branch\\src\\Chamilo\\Libraries\\VuePlugins\\src\\Plugins\\ScoreRubric\\Domain\\Cluster.ts","mtime":1574763316000},{"path":"D:\\Sites\\branch\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Sites\\branch\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Sites\\branch\\node_modules\\ts-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLWpzb24iOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLnVybC50by1qc29uIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJEOlxcU2l0ZXNcXGJyYW5jaFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIkQ6XFxTaXRlc1xcYnJhbmNoXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICJEOlxcU2l0ZXNcXGJyYW5jaFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI7CmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSAiRDpcXFNpdGVzXFxicmFuY2hcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mIjsKaW1wb3J0IF9nZXQgZnJvbSAiRDpcXFNpdGVzXFxicmFuY2hcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2dldCI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiRDpcXFNpdGVzXFxicmFuY2hcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IENhdGVnb3J5IGZyb20gIkAvUGx1Z2lucy9TY29yZVJ1YnJpYy9Eb21haW4vQ2F0ZWdvcnkiOwppbXBvcnQgQ3JpdGVyaXVtIGZyb20gIkAvUGx1Z2lucy9TY29yZVJ1YnJpYy9Eb21haW4vQ3JpdGVyaXVtIjsKaW1wb3J0IENvbnRhaW5lciBmcm9tICJAL1BsdWdpbnMvU2NvcmVSdWJyaWMvRG9tYWluL0NvbnRhaW5lciI7Cgp2YXIgQ2x1c3RlciA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db250YWluZXIpIHsKICBfaW5oZXJpdHMoQ2x1c3RlciwgX0NvbnRhaW5lcik7CgogIGZ1bmN0aW9uIENsdXN0ZXIoKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsdXN0ZXIpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKENsdXN0ZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgX3RoaXMuY29sbGFwc2VkID0gZmFsc2U7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ2x1c3RlciwgW3sKICAgIGtleTogImdldFNjb3JlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTY29yZSgpIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9nZ2xlQ29sbGFwc2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVDb2xsYXBzZWQoKSB7CiAgICAgIHRoaXMuY29sbGFwc2VkID0gIXRoaXMuY29sbGFwc2VkOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZENhdGVnb3J5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDYXRlZ29yeShjYXRlZ29yeSkgewogICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihDbHVzdGVyLnByb3RvdHlwZSksICJhZGRDaGlsZCIsIHRoaXMpLmNhbGwodGhpcywgY2F0ZWdvcnkpOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZENyaXRlcml1bSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ3JpdGVyaXVtKGNyaXRlcml1bSkgewogICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihDbHVzdGVyLnByb3RvdHlwZSksICJhZGRDaGlsZCIsIHRoaXMpLmNhbGwodGhpcywgY3JpdGVyaXVtKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmVDcml0ZXJpdW0iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUNyaXRlcml1bShjcml0ZXJpdW0pIHsKICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoQ2x1c3Rlci5wcm90b3R5cGUpLCAicmVtb3ZlQ2hpbGQiLCB0aGlzKS5jYWxsKHRoaXMsIGNyaXRlcml1bSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVtb3ZlQ2F0ZWdvcnkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUNhdGVnb3J5KGNhdGVnb3J5KSB7CiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKENsdXN0ZXIucHJvdG90eXBlKSwgInJlbW92ZUNoaWxkIiwgdGhpcykuY2FsbCh0aGlzLCBjYXRlZ29yeSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9KU09OIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdGl0bGU6IHRoaXMudGl0bGUsCiAgICAgICAgY2F0ZWdvcmllczogdGhpcy5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgICAgICByZXR1cm4gY2hpbGQgaW5zdGFuY2VvZiBDYXRlZ29yeTsKICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGNhdGVnb3J5KSB7CiAgICAgICAgICByZXR1cm4gY2F0ZWdvcnkudG9KU09OKCk7CiAgICAgICAgfSksCiAgICAgICAgY3JpdGVyaWE6IHRoaXMuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkgewogICAgICAgICAgcmV0dXJuIGNoaWxkIGluc3RhbmNlb2YgQ3JpdGVyaXVtOwogICAgICAgIH0pLm1hcChmdW5jdGlvbiAoY3JpdGVyaXVtKSB7CiAgICAgICAgICByZXR1cm4gY3JpdGVyaXVtLnRvSlNPTigpOwogICAgICAgIH0pCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JpdGVyaWEiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgICByZXR1cm4gY2hpbGQgaW5zdGFuY2VvZiBDcml0ZXJpdW07CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImNhdGVnb3JpZXMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgICByZXR1cm4gY2hpbGQgaW5zdGFuY2VvZiBDYXRlZ29yeTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2x1c3RlcnMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuOyAvL2ludmFyaWFudCBnYXJkZWQgYXQgYWRkQ2hpbGQKICAgIH0KICB9XSwgW3sKICAgIGtleTogImZyb21KU09OIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tSlNPTihjbHVzdGVyKSB7CiAgICAgIHZhciBjbHVzdGVyT2JqZWN0OwoKICAgICAgaWYgKHR5cGVvZiBjbHVzdGVyID09PSAnc3RyaW5nJykgewogICAgICAgIGNsdXN0ZXJPYmplY3QgPSBKU09OLnBhcnNlKGNsdXN0ZXIpOwogICAgICB9IGVsc2UgewogICAgICAgIGNsdXN0ZXJPYmplY3QgPSBjbHVzdGVyOwogICAgICB9CgogICAgICB2YXIgbmV3Q2x1c3RlciA9IG5ldyBDbHVzdGVyKGNsdXN0ZXJPYmplY3QudGl0bGUpOwogICAgICBjbHVzdGVyT2JqZWN0LmNhdGVnb3JpZXMubWFwKGZ1bmN0aW9uIChjYXRlZ29yeUpzb25PYmplY3QpIHsKICAgICAgICByZXR1cm4gQ2F0ZWdvcnkuZnJvbUpTT04oY2F0ZWdvcnlKc29uT2JqZWN0KTsKICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2F0ZWdvcnkpIHsKICAgICAgICByZXR1cm4gbmV3Q2x1c3Rlci5hZGRDYXRlZ29yeShjYXRlZ29yeSk7CiAgICAgIH0pOwogICAgICBjbHVzdGVyT2JqZWN0LmNyaXRlcmlhLm1hcChmdW5jdGlvbiAoY3JpdGVyaXVtT2JqZWN0KSB7CiAgICAgICAgcmV0dXJuIENyaXRlcml1bS5mcm9tSlNPTihjcml0ZXJpdW1PYmplY3QpOwogICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjcml0ZXJpdW0pIHsKICAgICAgICByZXR1cm4gbmV3Q2x1c3Rlci5hZGRDcml0ZXJpdW0oY3JpdGVyaXVtKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBuZXdDbHVzdGVyOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENsdXN0ZXI7Cn0oQ29udGFpbmVyKTsKCmV4cG9ydCB7IENsdXN0ZXIgYXMgZGVmYXVsdCB9Ow=="},{"version":3,"sources":["D:\\Sites\\branch\\src\\Chamilo\\Libraries\\VuePlugins\\src\\Plugins\\ScoreRubric\\Domain\\Cluster.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,OAAO,QAAP,MAA2C,uCAA3C;AACA,OAAO,SAAP,MAA6C,wCAA7C;AACA,OAAO,SAAP,MAAsB,wCAAtB;;IASqB,O;;;;;AAArB,qBAAA;AAAA;;AAAA;;;AACW,UAAA,SAAA,GAAqB,KAArB;AADX;AAoEC;;;;+BAjEkB;AACX,aAAO,CAAP;AACH;;;sCAEqB;AAClB,WAAK,SAAL,GAAiB,CAAC,KAAK,SAAvB;AACH;;;gCAEkB,Q,EAAkB;AACjC,4EAAe,QAAf;AACH;;;iCAEmB,S,EAAoB;AACpC,4EAAe,SAAf;AACH;;;oCAEsB,S,EAAoB;AACvC,+EAAkB,SAAlB;AACH;;;mCAEqB,Q,EAAiB;AACnC,+EAAkB,QAAlB;AACH;;;6BAcK;AACF,aAAO;AACH,QAAA,KAAK,EAAE,KAAK,KADT;AAEH,QAAA,UAAU,EAAE,KAAK,QAAL,CAAc,MAAd,CAAqB,UAAA,KAAK;AAAA,iBAAK,KAAK,YAAY,QAAtB;AAAA,SAA1B,EAA2D,GAA3D,CAA+D,UAAC,QAAD;AAAA,iBAAe,QAAqB,CAAC,MAAtB,EAAf;AAAA,SAA/D,CAFT;AAGH,QAAA,QAAQ,EAAE,KAAK,QAAL,CAAc,MAAd,CAAqB,UAAA,KAAK;AAAA,iBAAK,KAAK,YAAY,SAAtB;AAAA,SAA1B,EAA4D,GAA5D,CAAgE,UAAC,SAAD;AAAA,iBAAgB,SAAuB,CAAC,MAAxB,EAAhB;AAAA,SAAhE;AAHP,OAAP;AAKH;;;wBAlBW;AACR,aAAO,KAAK,QAAL,CAAc,MAAd,CAAqB,UAAA,KAAK;AAAA,eAAK,KAAK,YAAY,SAAtB;AAAA,OAA1B,CAAP;AACH;;;wBAEa;AACV,aAAO,KAAK,QAAL,CAAc,MAAd,CAAqB,UAAA,KAAK;AAAA,eAAK,KAAK,YAAY,QAAtB;AAAA,OAA1B,CAAP;AACH;;;wBAEW;AACR,aAAO,KAAK,QAAZ,CADQ,CAC2B;AACtC;;;6BAUe,O,EAAmC;AAC/C,UAAI,aAAJ;;AACA,UAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,QAAA,aAAa,GAAG,IAAI,CAAC,KAAL,CAAW,OAAX,CAAhB;AACH,OAFD,MAEO;AACH,QAAA,aAAa,GAAG,OAAhB;AACH;;AAED,UAAI,UAAU,GAAG,IAAI,OAAJ,CACb,aAAa,CAAC,KADD,CAAjB;AAIA,MAAA,aAAa,CAAC,UAAd,CACK,GADL,CACS,UAAA,kBAAkB;AAAA,eAAI,QAAQ,CAAC,QAAT,CAAkB,kBAAlB,CAAJ;AAAA,OAD3B,EAEK,OAFL,CAEa,UAAA,QAAQ;AAAA,eAAI,UAAU,CAAC,WAAX,CAAuB,QAAvB,CAAJ;AAAA,OAFrB;AAGA,MAAA,aAAa,CAAC,QAAd,CACK,GADL,CACS,UAAA,eAAe;AAAA,eAAI,SAAS,CAAC,QAAV,CAAmB,eAAnB,CAAJ;AAAA,OADxB,EAEK,OAFL,CAEa,UAAA,SAAS;AAAA,eAAI,UAAU,CAAC,YAAX,CAAwB,SAAxB,CAAJ;AAAA,OAFtB;AAIA,aAAO,UAAP;AACH;;;;EAnEgC,S;;SAAhB,O","sourcesContent":["import {Element} from \"@/Plugins/ScoreRubric/Domain/Rubric\";\nimport Category, {CategoryJsonObject} from \"@/Plugins/ScoreRubric/Domain/Category\";\nimport Criterium, {CriteriumJsonObject} from \"@/Plugins/ScoreRubric/Domain/Criterium\";\nimport Container from \"@/Plugins/ScoreRubric/Domain/Container\";\n\nexport interface ClusterJsonObject {\n    title: string;\n    categories: CategoryJsonObject[];\n    criteria: CriteriumJsonObject[];\n\n}\n\nexport default class Cluster extends Container {\n    public collapsed: boolean = false;\n\n    public getScore(): number {\n        return 0;\n    }\n\n    public toggleCollapsed() { //todo view state?\n        this.collapsed = !this.collapsed;\n    }\n\n    public addCategory(category: Category): void {\n        super.addChild(category);\n    }\n\n    public addCriterium(criterium: Criterium): void {\n        super.addChild(criterium);\n    }\n\n    public removeCriterium(criterium: Criterium): void {\n        super.removeChild(criterium);\n    }\n\n    public removeCategory(category:Category) {\n        super.removeChild(category);\n    }\n\n    get criteria():Criterium[] {\n        return this.children.filter(child => (child instanceof Criterium)) as Criterium[];\n    }\n\n    get categories():Category[] {\n        return this.children.filter(child => (child instanceof Category)) as Category[];\n    }\n\n    get clusters():Cluster[] {\n        return this.children as Cluster[]; //invariant garded at addChild\n    }\n\n    toJSON(): ClusterJsonObject {\n        return {\n            title: this.title,\n            categories: this.children.filter(child => (child instanceof Category)).map((category) => (category as Category).toJSON()),//todo typeguards?\n            criteria: this.children.filter(child => (child instanceof Criterium)).map((criterium) => (criterium as Criterium).toJSON())\n        }\n    }\n\n    static fromJSON(cluster: string | ClusterJsonObject): Cluster {\n        let clusterObject: ClusterJsonObject;\n        if (typeof cluster === 'string') {\n            clusterObject = JSON.parse(cluster);\n        } else {\n            clusterObject = cluster;\n        }\n\n        let newCluster = new Cluster(\n            clusterObject.title\n        );\n\n        clusterObject.categories\n            .map(categoryJsonObject => Category.fromJSON(categoryJsonObject))\n            .forEach(category => newCluster.addCategory(category));\n        clusterObject.criteria\n            .map(criteriumObject => Criterium.fromJSON(criteriumObject))\n            .forEach(criterium => newCluster.addCriterium(criterium));\n\n        return newCluster;\n    }\n}\n"],"sourceRoot":""}]}