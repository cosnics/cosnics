{% set appContext = 'Chamilo\\Application\\Weblcms\\Tool\\Implementation\\ExamAssignment' %}
{{ HEADER|raw }}
<style type="text/css">
    .u-align-right {
        text-align: right;
    }
    .b-table td.mod-valign-middle {
        vertical-align: middle;
    }
    #app {
        margin-bottom: 30px;
        max-width: 30em;
    }
    #app ::placeholder {
        color: #999;
        font-style: oblique;
    }
    .app-table-container {
        margin-bottom: 30px;
    }
    .tbl-extra-time {
        color: #555;
        width: 110px;
    }
    .tbl-btn-remove {
        text-align: center;
        width: 50px;
    }
    .tbl-no-sort {
        pointer-events: none
    }
    .extra-time-container {
        background: #f5f5f5;
        border: 1px solid #cdcdcd;
        border-radius: 4px;
        border-top: none;
        padding: 9px;
    }
    .extra-time-input-container {
        margin-bottom: 10px;
    }
    label[for="extra-time"] {
        font-weight: normal;
    }
    .form-control.mod-extra-time {
        display: inline-block;
        height: initial;
        line-height: initial;
        margin: 0 5px;
        text-align: center;
        width: 5em;
    }
    .btn.mod-save {
        margin-right: 5px;
    }
    .btn.mod-delete {
        padding: 2px 4px;
    }
    .fa.mod-delete {
        color: #666;
    }
    .pagination-container {
        display: flex;
        justify-content: flex-end;
    }
    .pagination.mod-overtime {
        margin: 10px 0 0;
    }
</style>
<div id="app">
    <div class="app-table-container">
        <b-table striped hover class="table-bordered" :items="overtimeUsers" :fields="fields"
                 :per-page="pagination.perPage" :current-page="pagination.currentPage"
                 show-empty empty-text="{{ 'NoStudentsExtraTime'|trans({}, appContext) }}">
            <template v-slot:cell(fullname)="data">
                ${ data.value }
            </template>
            <template v-slot:cell(remove)="data">
                <button class="btn btn-default mod-delete" @click="deleteExtraTime(data.item)" title="{{ 'Remove'|trans({}, appContext) }}"><i class="fa fa-times mod-delete" aria-hidden="true"></i><span class="sr-only">{{ 'Remove'|trans({}, appContext) }}</span></button>
            </template>
        </b-table>
        <div class="pagination-container" v-if="pagination.total > pagination.perPage">
            <b-pagination v-model="pagination.currentPage" :total-rows="pagination.total" :per-page="pagination.perPage"
                          aria-controls="data-table" class="mod-overtime"></b-pagination>
        </div>
    </div>
    <div>
        <v-select label="fullname" :value="selectedUser" @input="setSelected" :options="users" placeholder="{{ 'FindAStudent'|trans({}, appContext) }}">
            <div slot="no-options">{{ 'NoMatchingOptions'|trans({}, appContext) }}</div>
        </v-select>
        <div v-if="selectedUser" class="extra-time-container">
            <div class="extra-time-input-container">
                <label for="extra-time">{{ 'ExtraTime'|trans({}, appContext) }}</label>
                <input id="extra-time" type="number" v-model="extraTime" min="0" @keyup.enter="applyExtraTime" oninput="validity.valid||(value='');" class="form-control mod-extra-time" /> {{ 'Minutes'|trans({}, appContext) }}
            </div>
            <div>
                <button class="btn btn-sm btn-primary mod-save" @click="applyExtraTime">{{ 'Save'|trans({}, appContext) }}</button>
                <button class="btn btn-sm btn-default" @click="selectedUser = null">{{ 'Cancel'|trans({}, appContext) }}</button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    Vue.component('v-select', VueSelect.VueSelect);

    var publicationId = {{ PUBLICATION_ID }};

    var addUserOvertimeUrl = '{{ ADD_USER_OVERTIME_AJAX_URL|raw }}';
    var updateUserOvertimeUrl = '{{ UPDATE_USER_OVERTIME_AJAX_URL|raw }}';
    var deleteUserOvertimeUrl = '{{ DELETE_USER_OVERTIME_AJAX_URL|raw }}';

    var users = JSON.parse('{{ USERS|json_encode|raw }}');
    for (var i = 0; i < users.length; i += 1) {
        users[i].fullname = fullname(users[i]);
    }
    var overtimeUsers = JSON.parse('{{ USERS_OVERTIME|json_encode|raw }}');

    function fullname(user) {
        return user.lastname.toUpperCase() + ', ' + user.firstname;
    }

    new Vue({
        el: '#app',
        delimiters: ['${', '}'],
        data: {
            users: users,
            overtimeUsers: overtimeUsers,
            extraTime: 0,
            selectedUser: null,
            fields: [
                {
                    key: 'fullname',
                    label: '{{ 'UserEntity'|trans({}, appContext) }}',
                    sortable: true,
                    sortByFormatted: true,
                    tdClass: 'mod-valign-middle',
                    formatter: function (value, key, item) {
                        return fullname(item);
                    }
                },
                {
                    key: 'extra_time',
                    label: '{{ 'MinutesExtra'|trans({}, appContext) }}',
                    thClass: 'tbl-extra-time tbl-no-sort u-align-right',
                    tdClass: 'u-align-right mod-valign-middle'
                },
                {
                    key: 'remove',
                    label: '',
                    thClass: 'tbl-btn-remove tbl-no-sort',
                    tdClass: 'tbl-btn-remove'
                }
            ],
            pagination: {
                currentPage: 1,
                perPage: 10,
                total: 0
            }
        },
        mounted: function () {
            this.calculatePagination();
        },
        methods: {
            calculatePagination: function () {
                this.pagination.total = this.overtimeUsers.length;
            },
            findOvertimeUser(user) {
                if (!user) { return; }
                for (var i = 0; i < this.overtimeUsers.length; i += 1) {
                    if (this.overtimeUsers[i].user_id === user.id) {
                        return this.overtimeUsers[i];
                    }
                }
            },
            setSelected(user) {
                this.selectedUser = user;
                var overtimeUser = this.findOvertimeUser(user);
                if (overtimeUser) {
                    this.extraTime = overtimeUser.extra_time;
                } else {
                    this.extraTime = 0;
                }
            },
            applyExtraTime() {
                var overtimeUser = this.findOvertimeUser(this.selectedUser);
                var extraTime = parseInt(this.extraTime);
                if (extraTime === 0) {
                    this.deleteExtraTime(overtimeUser);
                } else {
                    if (!overtimeUser) {
                        this.performAjaxCall(addUserOvertimeUrl, { 'publication_id': publicationId, 'user_id': this.selectedUser.id, 'extra_time': extraTime });
                    } else {
                        this.performAjaxCall(updateUserOvertimeUrl, { 'publication_id': publicationId, 'user_overtime_id': overtimeUser.id, 'extra_time': extraTime });
                    }
                }
            },
            deleteExtraTime(overtimeUser) {
                this.performAjaxCall(deleteUserOvertimeUrl, { 'publication_id': publicationId, 'user_overtime_id': overtimeUser.id });
            },
            performAjaxCall(url, options) {
                $.post(url, options, (function (data) {
                    this.overtimeUsers = data.usersOvertime;
                    this.calculatePagination();
                }).bind(this)).fail(function (xhr) {
                    console.log(xhr.responseJSON.error);
                });
                this.setSelected(null);
            }
        }
    });
</script>
{{ FOOTER|raw }}
