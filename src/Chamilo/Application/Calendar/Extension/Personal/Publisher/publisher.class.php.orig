<?php
namespace application\calendar\extension\personal;

use libraries\storage\DataClassRetrievesParameters;
use libraries\storage\InCondition;
use libraries\architecture\Application;
use libraries\platform\Translation;
use libraries\utilities\Utilities;
use libraries\format\Theme;
use core\repository\ContentObject;
use libraries\storage\PropertyConditionVariable;

/**
 *
 * @package application\calendar
 * @author Hans De Bisschop <hans.de.bisschop@ehb.be>
 */
class Publisher
{

    /**
     *
     * @var Application
     */
    private $application;

    /**
     *
     * @param Application $application
     */
    public function __construct(Application $application)
    {
        $this->application = $application;
    }

    /**
     *
     * @param int[] $ids
     */
    public function get_publications_form($ids)
    {
        if (is_null($ids))
        {
            return '';
        }

        if (! is_array($ids))
        {
            $ids = array($ids);
        }

        $html = array();

        if (count($ids) > 0)
        {
            $parameters = new DataClassRetrievesParameters(
                new InCondition(
                    new PropertyConditionVariable(ContentObject :: class_name(), ContentObject :: PROPERTY_ID),
                    $ids,
                    ContentObject :: get_table_name()));

            $content_objects = \core\repository\DataManager :: retrieve_active_content_objects(
                ContentObject :: class_name(),
                $parameters);

            $html[] = '<div class="content_object padding_10">';
            $html[] = '<div class="title">' . Translation :: get(
                'SelectedContentObjects',
                null,
                Utilities :: COMMON_LIBRARIES) . '</div>';
            $html[] = '<div class="description">';
            $html[] = '<ul class="attachments_list">';

            while ($content_object = $content_objects->next_result())
            {
                $namespace = Utilities :: get_namespace_from_classname($content_object->get_type());
                $html[] = '<li><img src="' . Theme :: get_image_path($namespace) . 'logo/' . Theme :: ICON_MINI .
                     '.png" alt="' . htmlentities(Translation :: get('TypeName', null, $namespace)) . '"/> ' .
                     $content_object->get_title() . '</li>';
            }

            $html[] = '</ul>';
            $html[] = '</div>';
            $html[] = '</div>';
        }

        $parameters = $this->application->get_parameters();
        $parameters[\core\repository\viewer\Manager :: PARAM_ID] = $ids;
        $parameters[\core\repository\viewer\Manager :: PARAM_ACTION] = \core\repository\viewer\Manager :: ACTION_PUBLISHER;

        $form = new PublicationForm(
            PublicationForm :: TYPE_MULTI,
            $ids,
            $this->application->get_user(),
            $this->application->get_url($parameters));

        if ($form->validate())
        {
            $publication = $form->create_content_object_publications();

            if (! $publication)
            {
                $message = Translation :: get(
                    'ObjectNotPublished',
                    array('OBJECT' => Translation :: get('PersonalCalendar')),
                    Utilities :: COMMON_LIBRARIES);
            }
            else
            {
                $message = Translation :: get(
                    'ObjectPublished',
                    array('OBJECT' => Translation :: get('PersonalCalendar')),
                    Utilities :: COMMON_LIBRARIES);
            }

            $this->application->redirect(
                $message,
                (! $publication ? true : false),
                array(Application :: PARAM_ACTION => Manager :: ACTION_BROWSE));
        }
        else
        {
            $html[] = $form->toHtml();
            $html[] = '<div style="clear: both;"></div>';

            $this->application->display_header();
            echo implode("\n", $html);
            $this->application->display_footer();
        }
    }
}
