<?php
namespace Chamilo\Core\Reporting;

/**
 * $Id: ReportingDataStyle.php
 *
 * Class stores properties of a reporting data row.
 * Note that reporting data rows are actually columns in PDF, excel, ods, etc files.   
 *
 * @package reporting.lib
 * @author Andras Zolnay
 *
 * Customizing (PDF) Reports: 
 * - Report (sub)title: In order to generate report title, the class name of the concrete reporting template (derived from ReportingTemplate)
 * is translated in the context of the template. Block titles are also generated by translating the block class name (derived from
 * ReportingBlock).
 *
 * - Report logo: Logo included in reports can be customized in Chamilo/Configuration/Resources/Images/<Theme>/LogoReport.png. 
 * 
 * - PDF report orientation: By overriding the function get_paper_orientation() in concrete reporing template classes, templates can decide
 *   whether to use landscape or portrait orientation.
 *
 * - Report column styles: Chamilo administrators can customize the default style for all reports via the Administation module.  Nevertheless,
 * concrete reporting templates and blocks can overrule the configured style. In reporting blocks ReportingDataStyle ojects can be assigned
 * to data rows. The following example shows how to define the heading colors and define the column widths:
 *
 * $style = new ReportingDataStyle();
 * $style->get_heading_cell_style()->set_text_color(array(255, 255, 255));
 * $style->get_heading_cell_style()->set_background_color(array(150, 150, 150));
 *
 * $style->set_relative_width(0.2);
 * $reporting_data->add_row(Translation :: get('Title'), $style);
 *
 * $style->set_relative_width(0.15);
 * $reporting_data->add_row(Translation :: get('NumberOfSubmissions'), $style);
 */
class ReportingDataStyle
{
    /**
     *  Stores properies (e.g. font, text color, etc.) of the heading cell.
     *
     *  @var ReportingDataCellStyle
     */
    private $heading_cell_style;
    /**
     *  Stores properies (e.g. font, text color, etc.) of the data cells.
     *
     *  @var ReportingDataCellStyle
     */
    private $data_cell_style;
    /**
     *  Row (actually column) width given relative to the page width.
     *
     *  Value is expected to be within [0..1].
     */
    private $relative_width;


    function __construct()
    {
        $this->heading_cell_style = new ReportingDataCellStyle();
        $this->heading_cell_style->set_alignment(\Chamilo\Configuration\Configuration :: get('Chamilo\Core\Reporting', 'heading_cell_alignment'));
        $this->heading_cell_style->set_text_color(\Chamilo\Configuration\Configuration :: get('Chamilo\Core\Reporting', 'heading_cell_text_color'));
        $this->heading_cell_style->set_background_color(\Chamilo\Configuration\Configuration :: get('Chamilo\Core\Reporting', 'heading_cell_background_color'));
        $this->heading_cell_style->set_border_color(\Chamilo\Configuration\Configuration :: get('Chamilo\Core\Reporting', 'heading_cell_border_color'));
        $this->heading_cell_style->set_font(\Chamilo\Configuration\Configuration :: get('Chamilo\Core\Reporting', 'heading_cell_font'));

        $this->data_cell_style = new ReportingDataCellStyle();
        $this->data_cell_style->set_alignment(\Chamilo\Configuration\Configuration :: get('Chamilo\Core\Reporting', 'data_cell_alignment'));
        $this->data_cell_style->set_text_color(\Chamilo\Configuration\Configuration :: get('Chamilo\Core\Reporting', 'data_cell_text_color'));
        $this->data_cell_style->set_background_color(\Chamilo\Configuration\Configuration :: get('Chamilo\Core\Reporting', 'data_cell_background_color'));
        $this->data_cell_style->set_border_color(\Chamilo\Configuration\Configuration :: get('Chamilo\Core\Reporting', 'data_cell_border_color'));
        $this->data_cell_style->set_font(\Chamilo\Configuration\Configuration :: get('Chamilo\Core\Reporting', 'data_cell_font'));

        $this->relative_width = 0.0;
    }


    /**
     *  Deep copy.
     */
    function __clone()
    {
        $this->heading_cell_style = clone $this->heading_cell_style;
        $this->data_cell_style = clone $this->data_cell_style;
    }

    
    /**
     *  @return Returns the ReportingDataCellStyle object for the heading cell.
     *
     *  Usage: reporting_data_style->get_heading_cell_style()->set_alignment('C');
     */
    public function get_heading_cell_style()
    {
        return $this->heading_cell_style;
    }

   /**
     *  @return Returns the ReportingDataCellStyle object for data cells.
     *
     *  Usage: reporting_data_style->get_data_cell_style()->set_alignment('C');
     */
    public function get_data_cell_style()
    {
        return $this->data_cell_style;
    }

    // setter and getter functions
    public function get_relative_width()
    {
        return $this->relative_width;
    }

    public function set_relative_width($relative_width)
    {
        $this->relative_width = $relative_width;
    }
}
?>