<?php
namespace Chamilo\Core\Reporting;

/**
 * Class stores style of a reporting template.
 *
 * @package reporting.lib
 * @author Andras Zolnay
 *         Configuration (PDF) Reports: Administrators can configure PDF reports centrally via Administration ->
 *         Settings -> Reporting. @see
 *         src/Chamilo/Core/Reporting/Resources/Settings/settings.xml. Individual reporing templates and blocks can
 *         override the central settings
 *         and define own style.
 *         Customizing (PDF) Reports:
 *         - Report (sub)title: In order to generate report title, the class name of the concrete reporting template
 *         (derived from ReportingTemplate)
 *         is translated in the context of the template. Block titles are also generated by translating the block class
 *         name (derived from
 *         ReportingBlock).
 *         - Report logo: Logo included in reports can be customized in
 *         Chamilo/Configuration/Resources/Images/<Theme>/LogoReport.png.
 *         - PDF report orientation: By overriding the function getStyle() in concrete reporing template classes,
 *         templates can return an
 *         ReportingTemplateStyle object with custom propery values. Among others the paper orientation property can be
 *         set.
 *         - Report column styles: Concrete reporting templates and blocks can overrule the configured style. In
 *         reporting blocks ReportingDataStyle
 *         ojects can be assigned to data rows. The following example shows how to define the heading colors and define
 *         the column widths:
 *         $style = new ReportingDataStyle();
 *         $style->getHeadingCellStyle()->setTextColor(array(255, 255, 255));
 *         $style->getHeadingCellStyle()->setBackgroundColor(array(150, 150, 150));
 *         $style->setRelativeWidth(0.2);
 *         $reportingData->add_row(Translation :: get('Title'), $style);
 *         $style->setRelativeWidth(0.15);
 *         $reportingData->add_row(Translation :: get('NumberOfSubmissions'), $style);
 */
class ReportingTemplateStyle
{

    /**
     * Paper orientation of template
     *
     * @var 'L' or 'P'.
     */
    private $paperOrientation;

    /**
     * Title text color
     *
     * @var array(r [0..255], g [0..255], b [0..255])
     */
    private $headerTextColor = array(0, 0, 0);

    /**
     * Template header font specification
     *
     * @var array(family, style, size)
     *      - family: name of installed font, e.g. 'Arial'.
     *      - style: either empty or combination of 'B', 'I', 'U' or empty string.
     *      - size: font size, e.g. 10.
     */
    private $headerFont = array('Arial', 'B', 11);

    /**
     * Header seprator line color
     *
     * @var array(r [0..255], g [0..255], b [0..255])
     */
    private $headerLineColor = array(0, 0, 0);

    function __construct()
    {
        $this->setPaperOrientation(
            \Chamilo\Configuration\Configuration::get('Chamilo\Core\Reporting', 'paper_orientation'));

        $this->setHeaderTextColor(
            \Chamilo\Configuration\Configuration::get('Chamilo\Core\Reporting', 'template_header_text_color'));
        $this->setHeaderFont(
            [
                \Chamilo\Configuration\Configuration::get('Chamilo\Core\Reporting', 'template_header_font_family'),
                \Chamilo\Configuration\Configuration::get('Chamilo\Core\Reporting', 'template_header_font_style'),
                \Chamilo\Configuration\Configuration::get('Chamilo\Core\Reporting', 'template_header_font_size')]);
        $this->setHeaderLineColor(
            \Chamilo\Configuration\Configuration::get('Chamilo\Core\Reporting', 'template_header_line_color'));

        $this->setFooterTextColor(
            \Chamilo\Configuration\Configuration::get('Chamilo\Core\Reporting', 'template_footer_text_color'));
        $this->setFooterFont(
            [
                \Chamilo\Configuration\Configuration::get('Chamilo\Core\Reporting', 'template_footer_font_family'),
                \Chamilo\Configuration\Configuration::get('Chamilo\Core\Reporting', 'template_footer_font_style'),
                \Chamilo\Configuration\Configuration::get('Chamilo\Core\Reporting', 'template_footer_font_size')]);
    }

    // setter and getter functions
    public function getPaperOrientation()
    {
        return $this->paperOrientation;
    }

    public function setPaperOrientation($paperOrientation)
    {
        $this->paperOrientation = $paperOrientation;
    }

    public function getHeaderTextColor($color)
    {
        return $this->headerTextColor;
    }

    public function setHeaderTextColor($color)
    {
        $this->headerTextColor = ReportingTemplateStyle::parseColor($color);
    }

    public function getHeaderFont($font)
    {
        return $this->headerFont;
    }

    public function setHeaderFont($font)
    {
        $this->headerFont = ReportingTemplateStyle::parseFont($font);
    }

    public function getHeaderLineColor($color)
    {
        return $this->headerLineColor;
    }

    public function setHeaderLineColor($color)
    {
        $this->headerLineColor = ReportingTemplateStyle::parseColor($color);
    }

    public function getFooterTextColor($color)
    {
        return $this->footerTextColor;
    }

    public function setFooterTextColor($color)
    {
        $this->footerTextColor = ReportingTemplateStyle::parseColor($color);
    }

    public function getFooterFont($font)
    {
        return $this->footerFont;
    }

    public function setFooterFont($font)
    {
        $this->footerFont = ReportingTemplateStyle::parseFont($font);
    }

    /**
     * \brief Parses font Family, Style, Size values.
     *
     * @param $font - Can be an array of strings: e.g. ['Arial', 'B', '10']
     * @return array: e.g. ['Arial', 'B', 10]
     */
    public static function parseFont($font)
    {
        if (count($font) != 3)
        {
            throw new \Exception('Invalid font: "' . implode(', ', $font) . '".');
        }

        $result = array();

        $result[] = trim($font[0]);
        $result[] = trim($font[1]);
        $result[] = intval($font[2]);

        return $result;
    }

    /**
     * \brief Parses R, G, B values.
     *
     * @param $color - Can be a string: e.g. '255, 255, 255'
     *        - Can be an array: e.g. [255, 255, 255]
     * @return array: e.g. [255, 255, 255].
     */
    public static function parseColor($color)
    {
        $color_array = $color;
        if (! is_array($color_array))
        {
            $color_array = explode(',', $color_array);
        }

        if (count($color_array) != 3)
        {
            throw new \Exception('Invalid color: "' . implode(', ', $color_array) . '".');
        }

        return array_map('intval', $color_array);
    }
}
?>