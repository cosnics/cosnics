<?php

namespace Chamilo\Core\Repository\ContentObject\Assignment\Integration\Chamilo\Core\Repository\ContentObject\LearningPath\Table\Entity;

use Chamilo\Core\User\Storage\DataClass\User;
use Chamilo\Libraries\Format\Table\Column\TableColumn;

/**
 * @package Chamilo\Core\Repository\ContentObject\Assignment\Integration\Chamilo\Core\Repository\ContentObject\LearningPath\Table\Entity
 * @author  Hans De Bisschop <hans.de.bisschop@ehb.be>
 * @author  Magali Gillard <magali.gillard@ehb.be>
 * @author  Eduard Vossen <eduard.vossen@ehb.be>
 */
class EntityTableCellRenderer
    extends \Chamilo\Core\Repository\ContentObject\Assignment\Display\Table\Entity\EntityTableCellRenderer
{

    /**
     * {@inheritdoc}
     * @see \Chamilo\Core\Repository\ContentObject\Assignment\Integration\Chamilo\Core\Repository\ContentObject\LearningPath\Table\Entity\EntityTableCellRenderer::isEntity()
     */
    protected function isEntity($entityId, $userId)
    {
        return $entityId == $userId;
    }

    public function renderCell(TableColumn $column, $entity): string
    {
        switch (true)
        {
            case ($column->get_name() == User::PROPERTY_FIRSTNAME || $column->get_name() == User::PROPERTY_LASTNAME):
                if ($this->canViewEntity($entity))
                {
                    return '<a href="' . $this->getEntityUrl($entity) . '">' . $entity[$column->get_name()] . '</a>';
                }
                else
                {
                    return $entity[$column->get_name()];
                }
                break;
        }

        return parent::renderCell($column, $entity); // TODO: Change the autogenerated stub
    }
}