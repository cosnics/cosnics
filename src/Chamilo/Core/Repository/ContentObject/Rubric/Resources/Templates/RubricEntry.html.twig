<div>
    {% set appContext = 'Chamilo\\Core\\Repository\\ContentObject\\Rubric' %}

    {{ getJavascript('Builder/cosnics-rubric.umd.js', appContext) }}
    {{ getCss('cosnics-rubric.css', appContext) }}

    <style type="text/css">
        .col-xs-12 #rubric-entry {
            margin: 0 -10px;
        }
        .cluster-sep.mod-grades:nth-last-child(2) {
            display: none;
        }
        .save-rubric-area {
            align-items: baseline;
            margin-left: .5em;
        }
        @media only screen and (max-width: 639px) {
            .save-rubric-area {
                width: 100%;
            }

            .save-rubric-area.mod-scores {
                order: 1;
            }
        }
        @media only screen and (min-width: 640px) {
            .save-rubric-area-content {
                position: absolute;
            }
            .save-rubric-area.mod-scores .save-rubric-area-content {
                margin-top: 3px;
            }
            .save-rubric-area.mod-grades .save-rubric-area-content {
                display: flex;
            }
        }
        @media only screen and (min-width: 780px) {
            .save-rubric-area.mod-scores .save-rubric-area-content {
                display: flex;
            }
        }
        @media only screen and (min-width: 900px) {
            .save-rubric-area.mod-scores .save-rubric-area-content {
                margin-top: -4px;
            }
        }
        .warning-msg {
            padding: 5px;
        }
        .warning-msg .fa-warning {
            color: orange;
            margin-right: 5px;
        }
        .info-msg {
            padding: 5px 5px 5px 8px;
        }
        .warning-msg button {
            border: 1px solid #ddd;
        }
    </style>

    <div id="rubric-entry">
        <h4 style="margin: 0 10px 10px 10px">{{ 'RubricEntry'|trans({}, appContext) }}</h4>

        <rubric-entry-wrapper v-if="rubricData" :rubric-data="rubricData" :rubric-results="rubricResults" :existing-result="existingResult" :show-errors="hasErrors" @on-save="saveRubric">
            <template v-slot:slot-outer>
                <div class="save-rubric-area" :class="useScores ? 'mod-scores' : 'mod-grades'">
                    <div class="save-rubric-area-content">
                        <button class="btn btn-primary" @click="saveRubric" v-html="$t('save')" :disabled="isSaving" type="button"></button>
                        <div v-if="showErrorMessage" class="warning-msg">
                            <i class="fa fa-warning"></i><span v-html="$t(error)"></span>
                            <button @click="showErrorMessage = false" class="btn btn-sm btn-default" style="padding: 2px 4px; margin-left: 2px;"><i class="fa fa-times" aria-hidden="true" style="color: #607d8b"></i><span class="sr-only">OK</span></button>
                        </div>
                        <div v-if="isSaving" class="info-msg" v-html="$t('is-saving')"></div>
                    </div>
                </div>
            </template>
        </rubric-entry-wrapper>
        {{ form_start(FORM) }}
        {{ form_widget(FORM.rubric_results, {'attr': {':value': 'rubricResultsJSON'} }) }}
        {{ form_end(FORM) }}
    </div>
    <script>
        Vue.use(BootstrapVue);
        Vue.use(VueI18n);
        Vue.use(this['cosnics-rubric'].default);
        var messages = {
            'en': {
                'error-empty-form': 'Attention. You haven\'t selected a level for any criterium.',
                'error-any': 'Attention: invalid value(s) found. Please correct.',
                'is-saving': 'Saving rubric...',
                'save': 'Save rubric'
            },
            'fr': {
                'error-empty-form': 'Attention. Aucun criterium a reçu un niveau..',
                'error-any': 'Attention: valeur(s) invalide(s) trouvée(s).',
                'is-saving': 'En train de sauvegarder la rubrique...',
                'save': 'Sauvegarder la rubrique'
            },
            'nl': {
                'error-empty-form': 'Opgelet, voor geen enkel criterium is er een niveau geselecteerd.',
                'error-any': 'Opgelet: ongeldige waarde(n) aangetroffen.',
                'is-saving': 'Rubric aan het oplaan...',
                'save': 'Rubric opslaan'
            }
        };

        /*var data = JSON.parse(rubricDataJSON);*/
        var data = {{ RUBRIC_DATA_JSON|raw }};

        var existing_result = {{ RUBRIC_EXISTING_RESULT|raw }};

        var lang;
        try {
            lang = '{{ LANGUAGE|raw }}';
        } catch (err) {
            console.warn('Language could not be set, defaulting to English instead.');
            lang = 'en';
        }

        new Vue({
            i18n: new VueI18n({ locale: lang, messages }),
            el: '#rubric-entry',
            data: {
                rubricData: data,
                useScores: data ? data.use_scores : false,
                hasErrors: false,
                showErrorMessage: false,
                rubricResults: { results: [] },
                isSaving: false,
                existingResult: existing_result,
                error: ''
            },
            computed: {
                rubricResultsJSON: function() {
                    return JSON.stringify(this.rubricResults.results);
                }
            },
            methods: {
                saveRubric: function(event) {
                    event.preventDefault();
                    if (this.isSaving) { return; }
                    const results = this.rubricResults.results;
                    const gradedCriteria = results.filter(t => t.type === 'criterium').map(c => c.level_id).filter(l => l !== null);
                    if (!gradedCriteria.length) {
                        this.error = 'error-empty-form';
                        this.hasErrors = true;
                        this.showErrorMessage = true;
                        return;
                    }
                    const errorCriteria = results.filter(t => t.type === 'criterium').filter(c => !!c.error);
                    if (errorCriteria.length) {
                        this.error = 'error-any';
                        this.hasErrors = true;
                        this.showErrorMessage = true;
                        return;
                    }
                    this.hasErrors = false;
                    this.showErrorMessage = false;
                    this.error = '';
                    const form = document.querySelector('[name=entry_form]');
                    if (form) {
                        this.isSaving = true;
                        form.submit();
                    }
                }
            }
        });
    </script>

</div>
