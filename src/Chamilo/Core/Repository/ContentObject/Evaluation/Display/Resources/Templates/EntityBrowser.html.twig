{{ HEADER|raw }}

{% set appContext = 'Chamilo\\Core\\Repository\\ContentObject\\Evaluation\\Display' %}
{% set commonContext = 'Chamilo\\Libraries' %}

<style type="text/css">
    .u-contents {
        display: contents;
    }
    .u-inline-block {
        display: inline-block;
    }
    .u-flex {
        display: flex;
    }
    .u-flex-1 {
        flex: 1;
    }
    .u-flex-grow-1 {
        flex-grow: 1;
    }
    .u-flex-grow-2 {
        flex-grow: 2;
    }
    .u-align-items-center {
        align-items: center;
    }
    .u-justify-content-start {
        justify-content: flex-start;
    }
    .u-justify-content-end {
        justify-content: flex-end;
    }
    .u-gap-small {
        gap: 5px;
    }
    .u-gap-large {
        gap: 45px;
    }

    .form-inline.mod-entity-search {
        margin: 15px 0 0 5px;
    }

    .table-selected, .table-striped > tbody > tr.table-selected:nth-of-type(odd) {
        background-color: #e0e0e0;
    }

    .table-bordered > tbody > tr.table-selected > td:not(:last-child) {
        border-right-color: #d4d4d4;
    }

    td.table-lastname {
        text-transform: uppercase;
    }
    td.table-fb-count {
        text-align: center;
    }
    .tbl-no-sort {
        pointer-events: none
    }

    .presence {
        border-radius: 4px;
        text-align: center;
    }

    .presence-absent {
        /*background-color: #eb6a38;*/
        background-color: #437f7e;
        padding: 0 5px;
        color: #fff;
    }

    .presence-present {
        background-color: #ddf8e1;
        color: #027461;
    }

    .presence-neutral {
        /*background-color: #00f7ff2e; */
        --color: #c1dcc5;
        background-image: linear-gradient(135deg, var(--color) 10%, transparent 10%, transparent 50%, var(--color) 50%, var(--color) 60%, transparent 60%, transparent 100%);
        background-size: 7px 7px;
    }
    .presence-neutral::before {
        content: '.';
        color: transparent;
    }

    .fa.btn-icon-absent {
        transform: translateX(-1px);
    }
    .fa.btn-icon-absent::before {
        content: '\f1f7';
    }

    .fa.btn-icon-present::before, .fa.btn-icon-neutral::before {
        content: '\f0a2';
    }

    .tbl-sort-option {
        background-position: right calc(.75rem / 2) center;
        background-repeat: no-repeat;
        background-size: .65em 1em;
        cursor: pointer;
        padding-right: calc(.75rem + .85em);
        pointer-events: all;
    }
    .tbl-sort-option[aria-sort=none] {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='101' height='101' view-box='0 0 101 101' preserveAspectRatio='none'%3e%3cpath fill='black' opacity='.3' d='M51 1l25 23 24 22H1l25-22zM51 101l25-23 24-22H1l25 22z'/%3e%3c/svg%3e");
    }
    .tbl-sort-option[aria-sort=ascending] {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='101' height='101' view-box='0 0 101 101' preserveAspectRatio='none'%3e%3cpath fill='black' d='M51 1l25 23 24 22H1l25-22z'/%3e%3cpath fill='black' opacity='.3' d='M51 101l25-23 24-22H1l25 22z'/%3e%3c/svg%3e");
    }
    .tbl-sort-option[aria-sort=descending] {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='101' height='101' view-box='0 0 101 101' preserveAspectRatio='none'%3e%3cpath fill='black' opacity='.3' d='M51 1l25 23 24 22H1l25-22z'/%3e%3cpath fill='black' d='M51 101l25-23 24-22H1l25 22z'/%3e%3c/svg%3e");
    }
    .table.mod-evaluation:not(.is-scores-editable) th.table-score {
        text-align: center;
    }
    td.table-score {
        min-width: 72px;
    }
    .table.is-scores-editable td.table-score {
        padding: 5px 8px;
        width: 8rem;
    }
    input.form-control.mod-score {
        border-radius: .2rem;
        font-size: 1.3rem;
        height: calc(1.5em + .5rem + 2px);
        line-height: 1.5;
        min-width: 46px;
        padding: .25rem .5rem;
    }

    .btn.mod-presence {
        font-size: 14px;
        margin-left: 5px;
        padding: 2px 5px;
    }
    .table.mod-evaluation {
        width: initial;
    }

    .table.mod-evaluation .col-fit, .table.mod-evaluation .col-fit[aria-sort]:not(.b-table-sort-icon-left) {
        padding-right: 30px;
        white-space: nowrap;
        width: 1px;
    }

    {% if not HAS_RUBRIC %}
    /* TODO: I copied these styles from rubrics but they should be global */
    .btn-check {
        background: none;
        border: none;
        color: #888;
        cursor: default;
        margin: 0;
        padding: 0;
    }
    .btn-icon-check {
        margin-right: .3em;
        width: 1em;
    }
    .btn-icon-check:before {
        content: "\f096";
    }
    .btn-check.checked .btn-icon-check:before {
        content: "\f046";
    }
    .lbl-check {
        border: 1px solid transparent;
        border-radius: 3px;
    }
    .btn-check:focus, .btn-check:hover {
        color: #1d4567;
    }
    .btn-check, .lbl-check:focus {
        outline: none;
    }
    {% endif %}
    .btn-check.mod-scores-editable {
        margin: 0 auto 0 15px;
    }
    .panel-feedback {
        border: none;
        margin-right:30px;
        margin-top: 67px;
        max-width: 80ch;
    }
    .panel-feedback h3 {
        color: #507177;
        font-size: 2rem;
    }
    .panel-feedback .list-group-item {
        padding-top: 20px;
    }
    .panel-feedback .list-group-item:nth-child(odd) {
        background-color: #e0e0e0;
    }
    .feedback-private {
        background-color: #d35555;
        color: #fff;
        font-size: 11px;
        margin-top: 4px;
        padding: 2px;
        text-transform: uppercase
    }
    .feedback-count {
        cursor: pointer;
        padding: 6px;
    }
    .feedback-new {
        margin-top: 20px;
        padding: 0 10px 0 15px;
    }
    .feedback-new-heading {
        color: #507177;
    }
    .feedback-new-input {
        padding: 5px;
        width: 100%;
    }
    .btn.mod-save-feedback {
        margin-top: 10px;
    }
    #is_private + label {
        font-weight: 500;
        transform: translateY(1px);
    }
</style>

{% set entityTypesPlural = ['UsersEntity', 'CourseGroupsEntity', 'PlatformGroupsEntity'] %}

<h3>{{ CONTENT_OBJECT_TITLE }}</h3>

<ul class="nav nav-tabs dynamic-visual-tabs" role="tablist">
    <li role="presentation" class="active"><a href="#entities" aria-controls="entities" role="tab" data-toggle="tab">{{ entityTypesPlural[ENTITY_TYPE]|trans({}, appContext) }}</a></li>
    <li role="presentation"><a href="#properties" aria-controls="properties" role="tab" data-toggle="tab">{{ 'Properties'|trans({}, appContext) }}</a></li>
    <li role="presentation"><a href="#rubric" aria-controls="properties" role="tab" data-toggle="tab">{{ 'Rubric'|trans({}, appContext) }}</a></li>
</ul>
{% set Present = 'Present'|trans({}, appContext) %}
{% set Absent = 'Absent'|trans({}, appContext) %}
{% set MarkedAsAbsent = 'MarkedAsAbsent'|trans({}, appContext) %}
{% set MarkPresentTooltip = 'MarkPresentTooltip'|trans({}, appContext) %}
{% set MarkAbsentTooltip = 'MarkAbsentTooltip'|trans({}, appContext) %}
<div class="dynamic-visual-tab-content tab-content">
    <div role="tabpanel" class="tab-pane tab-pane-with-border active" id="entities">
        <div class="u-flex u-gap-large">
            <div>
                <div class="u-flex u-align-items-center">
                    <div class="btn-toolbar btn-action-toolbar">
                        <div class="form-inline u-flex u-justify-content-start mod-entity-search">
                            <div class="action-bar input-group">
                                <b-form-input class="form-group form-control action-bar-search" v-model="globalSearchQuery" @input="onFilterChanged"
                                              type="text" placeholder="{{ 'Search'|trans({}, appContext) }}" debounce="750" autocomplete="off"></b-form-input>
                                <div class="input-group-btn">
                                    <button name="clear" class="btn btn-default" value="clear" @click="onFilterCleared">
                                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button aria-label="" aria-expanded="false" class="btn-check mod-scores-editable" :class="{ 'checked': scoresEditable }" @click="scoresEditable = !scoresEditable"><span tabindex="-1" class="lbl-check"><i aria-hidden="true" class="btn-icon-check fa"></i>{{ 'EditScores'|trans({}, appContext) }}</span></button>
                    <div>
                        <a class="btn btn-default btn-sm" disabled>{{ 'Import'|trans({}, appContext) }}</a>
                        <a class="btn btn-default btn-sm" href="{{ EXPORT_URL }}">{{ 'Export'|trans({}, appContext) }}</a>
                    </div>
                </div>

                <b-table ref="table" striped bordered
                         :items="entitiesProvider"
                         :fields="fields"
                         :sort-by.sync="sortBy"
                         :sort-desc.sync="sortDesc"
                         :filter="globalSearchQuery"
                         :per-page="pagination.perPage"
                         :current-page="pagination.currentPage"
                         class="mod-evaluation" :class="{ 'is-scores-editable': scoresEditable }">
                    <template #head(fullname)="data">
                        <a class="tbl-sort-option" :aria-sort="getSortStatus('lastname')" @click="sortByNameField('lastname')">{{ 'Lastname'|trans({}, 'Chamilo\\Core\\User')|upper }}</a>
                        <a class="tbl-sort-option" :aria-sort="getSortStatus('firstname')" @click="sortByNameField('firstname')">{{ 'Firstname'|trans({}, 'Chamilo\\Core\\User') }}</a>
                    </template>
                    <template #cell(fullname)="data">
                        <a :href="getUrl(data.item.id)">${data.item.lastname.toUpperCase()}, ${data.item.firstname}</a>
                    </template>
                    <template #cell(score)="data">
                        <div class="u-flex u-align-items-center">
                            <span v-if="isLabelShown(data.item)" class="presence u-flex-1" :class="['presence-' + data.item.presence_status]" :title="labelTitles[data.item.presence_status]">${ getLabelText(data.item) }</span>
                            <b-form-input v-if="isInputShown(data.item)" class="form-control-sm mod-score" :data-item-index="data.index" v-model="data.item.score" type="text" debounce="750" @update="onScoreUpdated(data.item, $event)" @keydown.enter="focusFollowingScore(data.index, true)" @keydown.down="focusFollowingScore(data.index, true)" @keydown.up="focusFollowingScore(data.index, false)"></b-form-input>
                            <button v-if="scoresEditable" class="btn btn-default btn-sm mod-presence" @click.prevent="onPresenceStatusUpdated(data.item)" :title="(data.item.presence_status === 'absent' ? '{{ MarkPresentTooltip }}' : '{{ MarkAbsentTooltip }}')">
                                <span aria-hidden="true" class="fa" :class="['btn-icon-' + (data.item.presence_status === 'absent' ? 'present' : 'absent')]"></span><span class="sr-only">{{ MarkAs }} ${data.item.presence_status === 'absent' ? '{{ Present }}' : '{{ Absent }}'}</span>
                            </button>
                        </div>
                    </template>
                    <template #cell(feedback_count)="data"><a class="feedback-count" @click="loadFeedback(data.item)">${ data.item.feedback_count }</a>
                    </template>
                </b-table>
                <div class="pagination-container u-flex u-justify-content-end">
                    <b-pagination v-model="pagination.currentPage" :total-rows="pagination.total" :per-page="pagination.perPage"
                                  aria-controls="data-table"></b-pagination>
                    <ul class="pagination">
                        <li class="page-item active"><a class="page-link">{{ 'Total'|trans({}, appContext) }} ${ pagination.total }</a></li>
                    </ul>
                </div>
            </div>
            <div v-if="feedbackEntity" class="panel panel-default panel-feedback u-flex-grow-1">
                <div class="u-flex"><h3>Feedback</h3><a class="btn btn-sm" @click.prevent="closeFeedback">{{ 'Close'|trans({}, commonContext) }}</a></div>
                <div class="list-group">
                    <div v-for="item in feedback" :key="item.id" class="list-group-item">
                        <div class="u-flex">
                            <img class="panel-feedback-profile" :src="item.photo" />
                            <h4 class="list-group-item-heading u-flex-grow-2">${item.user}<div class="feedback-date">${item.date}</div>
                                <div v-if="item.isPrivate" style="margin-top: -2px;"><i class="glyphicon glyphicon-eye-close" style="color: #d35555;font-size: 1.2rem;"></i><em style="font-size: 11px;margin-left: 4px;color: #777;">{{ 'IsPrivate'|trans({}, 'Chamilo\\Core\\Repository\\Feedback') }}</em></div>
                            </h4>
                        </div>
                        <div class="list-group-item-text feedback-content" v-html="item.content"></div>
                    </div>
                    <div class="feedback-new u-flex">
                        <img src="{{ PHOTO_URL|raw }}" class="panel-feedback-profile">
                        <div class="u-flex-1">
                            <h4 class="feedback-new-heading">{{ 'AddFeedback'|trans({}, 'Chamilo\\Core\\Repository\\Feedback') }}</h4>
                            <textarea class="feedback-new-input" name="comment" v-model="newFeedback"></textarea>
                            <div class="u-flex u-gap-small"><input type="checkbox" v-model="isFeedbackPrivate" id="is_private" name="is_private" /><label for="#is_private">{{ 'IsPrivate'|trans({}, 'Chamilo\\Core\\Repository\\Feedback') }}</label></div>
                            <button class="btn btn-default mod-save-feedback" @click="createFeedback">{{ 'Save'|trans({}, commonContext) }}</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div role="tabpanel" class="tab-pane tab-pane-with-border" id="properties">
        <h3>{{ CONTENT_OBJECT_TITLE }}</h3>
        {{ CONTENT_OBJECT_RENDITION|raw }}
    </div>
    {% if SUPPORTS_RUBRICS %}
    <div role="tabpanel" class="tab-pane tab-pane-with-border" id="rubric">
        {% if HAS_RUBRIC %}
            {% if CAN_BUILD_RUBRIC %}
            <a href="{{ BUILD_RUBRIC_URL }}#/builder" class="btn btn-primary">{{ 'BuildRubric'|trans({}, appContext) }}</a>
            <form action="{{ REMOVE_RUBRIC_URL }}" method="post" class="u-contents"">
                <button class="btn btn-primary" onclick="return confirm('{{ 'ConfirmRemoveRubric'|trans({}, appContext) }}')">{{ 'RemoveRubric'|trans({}, appContext) }}</button>
            </form>
            {% else %}
            <div class="alert alert-warning">
                {{ 'RubricHasResults'|trans({}, 'Chamilo\\Core\\Repository\\ContentObject\\Rubric') }}
            </div>
            {% endif %}
            <div class="clearfix"></div>
            <div>{{ RUBRIC_PREVIEW|raw }}</div>
        {% else %}
            <div class="alert alert-info">{{ 'RubricNotPublishedMessage'|trans({}, appContext) }}</div>
            <a href="{{ ADD_RUBRIC_URL }}" class="btn btn-success">{{ 'AddRubric'|trans({}, appContext) }}</a>
        {% endif %}
    </div>
    {% endif %}
</div>
<script>
    $('document').ready(function () {
        new Vue({
            el: '#entities',
            delimiters: ['${', '}'],
            data: {
                entityType: {{ ENTITY_TYPE }},
                context: '',
                fields: [
                    { key: 'fullname', sortable: false, thClass: 'tbl-no-sort col-fit'},
                    { key: 'official_code', label: '{{ 'OfficialCode'|trans({}, 'Chamilo\\Core\\User') }}', sortable: true, thClass: 'col-fit' },
                    { key: 'score', sortable: false, thClass: 'tbl-no-sort', variant: 'score' },
                    { key: 'feedback_count', label: '{{ 'NumberOfFeedbacks'|trans({}, 'Chamilo\\Application\\Weblcms') }}', sortable: false, thClass: 'tbl-no-sort', variant: 'fb-count'  }//,
                ],
                sortBy: 'lastname',
                sortDesc: false,
                pagination: {
                    currentPage: 1,
                    perPage: 20, //3,
                    total: 0
                },
                globalSearchQuery: '',
                requestCount: true,
                scoresEditable: false,
                feedback: [],
                feedbackEntity: null,
                newFeedback: '',
                isFeedbackPrivate: false,
                labelTitles: {
                    'absent': '{{ MarkedAsAbsent }}',
                    'neutral': 'Nog geen score'
                }
            },

            methods: {
                focusFollowingScore(index, isNext) {
                    index = parseInt(index);
                    if (isNaN(index)) { return; }
                    index = index + (isNext ? 1 : -1);
                    if (index < 0 || index >= this.pagination.perPage) { return; }
                    var el = $('.form-control.mod-score[data-item-index=' + index + ']');
                    if (el.length) {
                        el.focus();
                    } else {
                        this.focusFollowingScore(index, isNext);
                    }
                },
                isLabelShown(entity) {
                    return entity.presence_status === 'absent' || (entity.presence_status !== 'absent' && !this.scoresEditable);
                },
                getLabelText(entity) {
                    if (entity.presence_status === 'present') {
                        return entity.score;
                    }
                    if (entity.presence_status === 'absent') {
                        return '{{ Absent }}';
                    }
                    return null;
                },
                isInputShown(entity) {
                    return entity.presence_status !== 'absent' && this.scoresEditable;
                },
                getUrl(entityId)
                {
                    return '{{ ENTITY_BASE_URL|raw }}&entity_type=' + this.entityType + '&entity_id=' + entityId;
                },
                loadFeedback(entity) {
                    $.ajax({
                        url: '{{ LOAD_FEEDBACK_URL|raw }}',
                        method: 'get',
                        data: {
                            entity_id: entity.id
                        }
                    }).done(function (data) {
                        this.feedback = data.properties;
                        this.feedbackEntity = entity;
                        var items = this.$refs.table.computedItems;
                        this.selectEntity(items, this.feedbackEntity.id);
                    }.bind(this));
                },
                closeFeedback() {
                    this.feedback = [];
                    this.feedbackEntity = null;
                    var items = this.$refs.table.computedItems;
                    for (var i = 0; i < items.length; i += 1) {
                        items[i]._rowVariant = undefined;
                    }
                },
                createFeedback() {
                    $.ajax({
                        url: '{{ SAVE_NEW_FEEDBACK_URL|raw }}',
                        method: 'post',
                        data: {
                            entity_id: this.feedbackEntity.id,
                            comment: this.newFeedback,
                            is_private: this.isFeedbackPrivate
                        }
                    }).done(function (data) {
                        this.newFeedback = '';
                        this.isFeedbackPrivate = false;
                        if (data.properties.status === 'ok') {
                            if (this.feedbackEntity && this.feedbackEntity.id === data.properties.entity_id) {
                                this.feedback.push(data.properties.feedback);
                            }
                            this.$refs.table.refresh();
                        }
                    }.bind(this));
                },
                onScoreUpdated(entity, score) {
                    $.ajax({
                        url: '{{ SAVE_SCORE_URL|raw }}',
                        method: 'post',
                        data: {
                            entity_id: entity.id,
                            score: score
                        }
                    }).done(function(data) {
                        entity.presence_status = data.properties.presence_status;
                    });
                },
                onPresenceStatusUpdated(entity) {
                    $.ajax({
                        url: '{{ SAVE_PRESENCE_STATUS_URL|raw }}',
                        method: 'post',
                        data: {
                            entity_id: entity.id,
                            presence_status: entity.presence_status === 'absent'
                        }
                    }).done(function(data) {
                        entity.presence_status = data.properties.presence_status;
                    });
                },
                getSortStatus(name) {
                    if (this.sortBy !== name) { return 'none'; }
                    return this.sortDesc ? 'descending' : 'ascending';
                },
                sortByNameField(namefield) {
                    if (this.sortBy === namefield) {
                        this.sortDesc = !this.sortDesc;
                        return;
                    }
                    this.sortBy = namefield;
                    this.sortDesc = false;
                },
                onFilterChanged: function() {
                    this.requestCount = true;
                },
                onFilterCleared: function() {
                    if (this.globalSearchQuery !== '') {
                        this.globalSearchQuery = '';
                        this.requestCount = true;
                    }
                },
                selectEntity(items, id) {
                    for (var i = 0; i < items.length; i += 1) {
                        if (items[i].id === id) {
                            items[i]._rowVariant = 'selected';
                        } else {
                            items[i]._rowVariant = undefined;
                        }
                    }
                },
                entitiesProvider: function(ctx, callback) {
                    $.ajax({
                        url: '{{ LOAD_ENTITIES_URL|raw }}',
                        data: {
                            global_search_query: ctx.filter,
                            sort_field: ctx.sortBy,
                            sort_direction: ctx.sortDesc ? 'desc' : 'asc',
                            items_per_page: ctx.perPage,
                            page_number: ctx.currentPage,
                            request_count: this.requestCount
                        }
                    }).done(function(data) {
                        var d = data.properties;
                        this.context = d.context;
                        if (d.count !== undefined) {
                            this.pagination.total = d.count;
                            this.requestCount = false;
                        }
                        var items = data.properties.entities;
                        if (this.feedbackEntity) {
                            this.selectEntity(items, this.feedbackEntity.id);
                        }
                        callback(items);
                    }.bind(this));
                }
            }
        });
    });
</script>
{{ FOOTER|raw }}
