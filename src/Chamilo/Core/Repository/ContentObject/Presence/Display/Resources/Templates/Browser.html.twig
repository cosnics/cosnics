{{ HEADER|raw }}

{% set appContext = 'Chamilo\\Core\\Repository\\ContentObject\\Presence\\Display' %}
{% set commonContext = 'Chamilo\\Libraries' %}

{{ getJavascript('cosnics-presence.umd.min.js', 'Chamilo\\Core\\Repository\\ContentObject\\Presence') }}
{{ getCss('cosnics-presence.css', 'Chamilo\\Core\\Repository\\ContentObject\\Presence') }}

<style>
    .nav.nav-buttons {
        align-items: baseline;
        background-color: #f7f7f7;
        border: 1px solid #ebebeb;
        border-radius: 4px;
        border-top-color: #f0f0f0;
        display: flex;
        max-width: -moz-fit-content;
        max-width: fit-content;
        padding: 0 2px;
    }

    .nav.nav-buttons .active {
        background-color: white;
        border-radius: 4px;
        box-shadow: 0 1px 2px #e8e8e8;
    }
    .nav.nav-buttons .active:hover, .nav.nav-buttons .active:focus {
        box-shadow: 0 1px 2px #d5d5d5;
    }
    .nav.nav-buttons li {
        margin: 7px 5px;
    }
    .nav.nav-buttons > li > a:hover, .nav.nav-buttons > li > a:focus {
        background-color: #fff;
    }
    .nav.nav-buttons > li > a {
        border-radius: 4px;
        padding: 3px 5px;
    }
    .nav.nav-buttons > li.active > a:not(:hover):not(:focus) {
        color: #507177;
    }
    .tab-pane.mod-pad {
        padding: 10px 15px;
    }

    .lbl-stat-show {
        color: #337ab7;
        cursor: pointer;
        font-weight: normal;
        text-decoration: none;
        margin-bottom: 0;
        padding: 3px 5px;
    }

    input[type=radio]:checked + .lbl-stat-show {
        background: #f5f5f5;
        border-radius: 3px;
        box-shadow: inset 0 0 2px #e8e8e8;
        color: #296265;
        cursor: default;
        font-size: 1.4rem;
        font-weight: 500;
        text-shadow: 0 2px #fcfcfc;
    }

    input[type=radio]:not(:checked) + .lbl-stat-show:hover {
        background: #f9f9f9;
    }

    input[type=radio]:not(:checked) + .lbl-stat-show:hover,
    input[type=radio]:not(:checked) + .lbl-stat-show:focus {
        color: #23527c;
    }
    .lbl-stat-show:focus {
        outline: none!important;
    }
    input[type=radio]:focus-visible + .lbl-stat-show {
        border: 1px solid #d6d6d6;
    }
</style>

<h3 style="margin-left: 15px;color: #507177;margin-top: 0;">{{ CONTENT_OBJECT_TITLE }}</h3>
<div id="main-content">
    <div style="margin: 15px 0 5px 8px" class="u-flex u-align-items-baseline u-gap-small-3x">
        <ul class="nav nav-buttons" role="tablist">
            <li role="presentation" :class="{'active': activeTab === 'entry'}"><a href="#" role="tab" @click="activeTab = 'entry'">{{ 'UsersEntity'|trans({}, appContext) }}</a></li>
            <li role="presentation" :class="{'active': activeTab === 'statistics'}"><a href="#" role="tab" @click="showStats">{{ 'Statistics'|trans({}, appContext) }}</a></li>
            <li role="presentation" :class="{'active': activeTab === 'properties'}"><a href="#" role="tab" @click="activeTab = 'properties'">{{ 'Properties'|trans({}, appContext) }}</a></li>
            <li role="presentation" :class="{'active': activeTab === 'builder'}"><a href="#" role="tab" @click="showBuilder">{{ 'PresenceBuilder'|trans({}, appContext) }}</a></li>
        </ul>
        <template v-if="activeTab === 'statistics'">
            <label id="show-by" class="u-font-normal" style="margin-right: -8px">${ $t('show-by') }:</label>
            <div class="u-flex u-gap-small u-align-items-baseline" role="radiogroup" aria-labelledby="show-by">
                <input type="radio" name="stat-show" id="stat-by-period" class="sr-only" value="period" v-model="statMode">
                <label for="stat-by-period" class="lbl-stat-show" tabindex="-1">${ $t('period') }</label>
                <input type="radio" name="stat-show" id="stat-by-student" class="sr-only" value="student" v-model="statMode">
                <label for="stat-by-student" class="lbl-stat-show" tabindex="-1">Student</label>
            </div>
        </template>
    </div>
    <div class="dynamic-visual-tab-content tab-content">
        <div role="tabpanel" class="tab-pane mod-pad" :class="{'active': activeTab === 'entry' || activeTab === 'statistics', 'js-statistics': activeTab === 'statistics' }" id="presence-entry" style="width: max-content; margin-top: 10px">
            <presence-entry :api-config="apiConfig" :load-index="updateCountEntry" :use-statistics="activeTab === 'statistics'" :stat-mode="statMode"></presence-entry>
        </div>
        <div role="tabpanel" class="tab-pane mod-pad" id="properties" :class="{'active': activeTab === 'properties'}">
            <a class="btn btn-default" style="margin-bottom: 20px;" :href="apiConfig.printQrCodeURL" target="_blank">{{ 'PrintQR'|trans({}, appContext) }}</a>
            <br>
            {{ 'EndSelfRegistration'|trans({}, appContext) }}
            {{ CONTENT_OBJECT_RENDITION|raw }}
        </div>
        <div role="tabpanel" class="tab-pane mod-pad" id="presence-builder" :class="{'active': activeTab === 'builder'}" style="margin-top: 10px">
            <presence-builder :api-config="apiConfig" :load-index="updateCountBuilder" @presence-data-changed="updateCountEntry += 1"></presence-builder>
        </div>
    </div>
</div>
<script>
    Vue.use(BootstrapVue);
    Vue.use(VueI18n);
    Vue.use(window['cosnics-presence'].default);

    const messages = {
        en: {
            "show-by": "Show by",
            "period": "Period"
        },
        nl: {
            "show-by": "Toon op",
            "period": "Periode"
        }
    };

    let lang;
    try {
        lang = '{{ LANGUAGE|raw }}';
    } catch (err) {
        console.warn('Language could not be set, defaulting to English instead.');
        lang = 'en';
    }

    const apiConfig = {
        loadPresenceEntriesURL: '{{ LOAD_PRESENCE_ENTRIES_URL|raw }}',
        loadStatisticsURL: '{{ LOAD_STATISTICS_URL|raw }}',
        loadPresenceURL: '{{ LOAD_PRESENCE_URL|raw }}',
        updatePresenceURL: '{{ UPDATE_PRESENCE_URL|raw }}',
        savePresenceEntryURL: '{{ SAVE_PRESENCE_ENTRY_URL|raw }}',
        bulkSavePresenceEntriesURL: '{{ BULK_SAVE_PRESENCE_ENTRIES_URL|raw }}',
        createPresencePeriodURL: '{{ CREATE_PRESENCE_PERIOD_URL|raw }}',
        updatePresencePeriodURL: '{{ UPDATE_PRESENCE_PERIOD_URL|raw }}',
        deletePresencePeriodURL: '{{ DELETE_PRESENCE_PERIOD_URL|raw }}',
        loadRegisteredPresenceEntryStatusesURL: '{{ LOAD_REGISTERED_PRESENCE_ENTRY_STATUSES_URL|raw }}',
        togglePresenceEntryCheckoutURL: '{{ TOGGLE_PRESENCE_ENTRY_CHECKOUT_URL|raw }}',
        printQrCodeURL: '{{ PRINT_QR_CODE_URL|raw }}',
        exportURL: '{{ EXPORT_URL|raw }}',
        csrfToken: '{{ csrf_token('ComponentToken') }}'
    };

    new Vue({
        i18n: new VueI18n({ locale: lang, messages }),
        el: '#main-content',
        delimiters: ['${', '}'],
        data: {
            apiConfig,
            updateCountEntry: 0,
            updateCountBuilder: 0,
            activeTab: 'entry',
            statMode: 'period',
            selectedPeriod: null
        },
        methods: {
            showBuilder() {
                if (this.activeTab !== 'builder') {
                    this.activeTab = 'builder';
                    this.updateCountBuilder += 1;
                }
            },
            showStats() {
                this.activeTab = 'statistics';
                if (this.statMode === 'period') {
                    this.statMode = '';
                    this.$nextTick(() => {
                        this.statMode = 'period';
                    });
                }
            }
        }
    });
</script>
{{ FOOTER|raw }}
