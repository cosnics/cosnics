{{ HEADER|raw }}

{% set appContext = 'Chamilo\\Core\\Repository\\ContentObject\\Presence\\Display' %}
{% set commonContext = 'Chamilo\\Libraries' %}

{{ getJavascript('cosnics-presence.umd.min.js', 'Chamilo\\Core\\Repository\\ContentObject\\Presence') }}
{{ getCss('cosnics-presence.css', 'Chamilo\\Core\\Repository\\ContentObject\\Presence') }}

<style>
    .nav.nav-buttons {
        align-items: baseline;
        background-color: #f7f7f7;
        border: 1px solid #ebebeb;
        border-radius: 4px;
        border-top-color: #f0f0f0;
        display: flex;
        max-width: -moz-fit-content;
        max-width: fit-content;
        padding: 0 2px;
    }

    .nav.nav-buttons .active {
        background-color: white;
        border-radius: 4px;
        box-shadow: 0 1px 2px #e8e8e8;
    }
    .nav.nav-buttons .active:hover, .nav.nav-buttons .active:focus {
        box-shadow: 0 1px 2px #d5d5d5;
    }
    .nav.nav-buttons li {
        margin: 7px 5px;
    }
    .nav.nav-buttons > li > a:hover, .nav.nav-buttons > li > a:focus {
        background-color: #fff;
    }
    .nav.nav-buttons > li > a {
        border-radius: 4px;
        padding: 3px 5px;
    }
    .nav.nav-buttons > li.active > a:not(:hover):not(:focus) {
        color: #507177;
    }
    .tab-pane.mod-pad {
        padding: 10px 15px;
    }
</style>

<h3 style="margin-left: 15px;color: #507177;margin-top: 0;">{{ CONTENT_OBJECT_TITLE }}</h3>
<div id="main-content">
    <div style="margin: 15px 0 5px 8px" class="u-flex u-align-items-center u-gap-small-3x">
        <ul class="nav nav-buttons" role="tablist">
            <li role="presentation" :class="{'active': activeTab === 'entry'}"><a href="#" role="tab" @click="activeTab = 'entry'">{{ 'UsersEntity'|trans({}, appContext) }}</a></li>
            <li role="presentation" :class="{'active': activeTab === 'properties'}"><a href="#" role="tab" @click="activeTab = 'properties'">{{ 'Properties'|trans({}, appContext) }}</a></li>
            <li role="presentation" :class="{'active': activeTab === 'statistics'}"><a href="#" role="tab" @click="showStats">Statistieken</a></li>
            <li role="presentation" :class="{'active': activeTab === 'builder'}"><a href="#" role="tab" @click="showBuilder">{{ 'PresenceBuilder'|trans({}, appContext) }}</a></li>
        </ul>
        <div class="u-flex u-gap-small" v-if="activeTab === 'statistics'">
            <span v-if="statMode === 'period'" style="padding: 3px 5px;background: #f5f5f5;color: #507177;border-radius: 3px;box-shadow:inset 0 0 2px #e8e8e8;">Periode</span>
            <a v-else style="cursor: pointer;text-decoration:none;padding: 3px 5px;" @click="statMode = 'period'">Periode</a>
            <span v-if="statMode === 'student'" style="padding: 3px 5px;background: #f5f5f5;color: #507177;border-radius: 3px;box-shadow:inset 0 0 2px #e8e8e8;">Student</span>
            <a v-else style="cursor: pointer;text-decoration:none;padding: 3px 5px;" @click="statMode = 'student'">Student</a>
        </div>
    </div>
    <div class="dynamic-visual-tab-content tab-content">
        <div role="tabpanel" class="tab-pane mod-pad" :class="{'active': activeTab === 'entry' || activeTab === 'statistics', 'js-statistics': activeTab === 'statistics' }" id="presence-entry" style="width: max-content; margin-top: 10px">
            <presence-entry :api-config="apiConfig" :load-index="updateCountEntry" :use-statistics="activeTab === 'statistics'" :stat-mode="statMode" can-edit-presence="true"></presence-entry>
        </div>
        <div role="tabpanel" class="tab-pane mod-pad" id="properties" :class="{'active': activeTab === 'properties'}">
            <a class="btn btn-default" style="margin-bottom: 20px;" href="{{ PRINT_QR_CODE_URL|raw }}" target="_blank">{{ 'PrintQR'|trans({}, appContext) }}</a>
            {{ CONTENT_OBJECT_RENDITION|raw }}
        </div>
        <div role="tabpanel" class="tab-pane mod-pad" id="presence-builder" :class="{'active': activeTab === 'builder'}" style="margin-top: 10px">
            <presence-builder :api-config="apiConfig" :load-index="updateCountBuilder" @presence-data-changed="updateCountEntry += 1"></presence-builder>
        </div>
    </div>
</div>
<script>
    Vue.use(BootstrapVue);
    Vue.use(VueI18n);
    Vue.use(window['cosnics-presence'].default);

    const messages = { en: [], nl: [] };

    let lang;
    try {
        lang = '{{ LANGUAGE|raw }}';
    } catch (err) {
        console.warn('Language could not be set, defaulting to English instead.');
        lang = 'en';
    }

    const apiConfig = {
        loadPresenceEntriesURL: '{{ LOAD_PRESENCE_ENTRIES_URL|raw }}',
        loadStatisticsURL: '{{ LOAD_STATISTICS_URL|raw }}',
        loadPresenceURL: '{{ LOAD_PRESENCE_URL|raw }}',
        updatePresenceURL: '{{ UPDATE_PRESENCE_URL|raw }}',
        savePresenceEntryURL: '{{ SAVE_PRESENCE_ENTRY_URL|raw }}',
        bulkSavePresenceEntriesURL: '{{ BULK_SAVE_PRESENCE_ENTRIES_URL|raw }}',
        createPresencePeriodURL: '{{ CREATE_PRESENCE_PERIOD_URL|raw }}',
        updatePresencePeriodURL: '{{ UPDATE_PRESENCE_PERIOD_URL|raw }}',
        deletePresencePeriodURL: '{{ DELETE_PRESENCE_PERIOD_URL|raw }}',
        loadRegisteredPresenceEntryStatusesURL: '{{ LOAD_REGISTERED_PRESENCE_ENTRY_STATUSES_URL|raw }}',
        togglePresenceEntryCheckoutURL: '{{ TOGGLE_PRESENCE_ENTRY_CHECKOUT_URL|raw }}',
        exportURL: '{{ EXPORT_URL|raw }}',
        csrfToken: '{{ csrf_token('ComponentToken') }}'
    };

    new Vue({
        i18n: new VueI18n({ locale: lang, messages }),
        el: '#main-content',
        delimiters: ['${', '}'],
        data: {
            apiConfig,
            updateCountEntry: 0,
            updateCountBuilder: 0,
            activeTab: 'entry',
            statMode: 'period'
        },
        methods: {
            showBuilder() {
                if (this.activeTab !== 'builder') {
                    this.activeTab = 'builder';
                    this.updateCountBuilder += 1;
                }
            },
            showStats() {
                this.activeTab = 'statistics';
                if (this.statMode === 'period') {
                    this.statMode = '';
                    this.$nextTick(() => {
                        this.statMode = 'period';
                    });
                }
            }
        }
    });
</script>
{{ FOOTER|raw }}
