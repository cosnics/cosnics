{% set appContext = 'Chamilo\\Core\\Notification' %}

<style>
    .notifications-list {
        width: 100%;
        box-shadow: 3px 3px 8px lightgrey;
        margin-bottom: 0;
    }

    .notifications-list .list-group-item {
        border-radius: 0;
        display: flex;
        justify-content: space-between;
    }

    .notifications-list .list-group-item:hover {
        background-color: #eeeeee;
    }

    .notifications-list .unread-notification {
        background-color: #deeff5;
    }

    .notifications-list .unread-notification:hover {
        background-color: #cce6ef;
    }

    .notifications-list .notifications-list-title {
        background-color: #eeeeee;
        padding: 5px 15px;
    }

    .notifications-list .notification-description {
        text-decoration: none;
        cursor: pointer;
        background-color: inherit !important;
        color: #333333 !important;
        text-align: left !important;
    }

    .notifications-list .notification-timestamp {
        font-size: 12px;
        color: #888888;
        margin-top: 5px;
    }

    .notifications-list .notification-actions {
        font-size: 20px;
        font-weight: bold;
        text-align: right;
        color: #999999;
        cursor: pointer;
        margin-left: 15px;
    }

    .notifications-list .notification-actions .btn {
        padding: 0;
    }

    .notifications-list .notification-actions a.dropdown-item {
        text-align: left;
        background-color: white !important;
        color: #333333 !important;
        padding: 0.75rem 1.5rem !important;
        font-size: 11px !important;
    }

    .notifications-list .notification-actions a.dropdown-item:hover {
        background-color: #dddddd !important;
    }

    .notifications-list .notification-actions .btn:hover {
        padding: 0;
        text-decoration: none;
    }

    .notifications-list .dropdown-menu {
        min-width: 352px;
    }

    .dropdown-item {
        display: block;
        width: 100%;
        min-width: 350px;
        padding: 0.25rem 1.5rem;
        clear: both;
        font-weight: 400;
        color: #212529;
        text-align: inherit;
        background-color: transparent;
        border: 0;
    }

    .dropdown-item:hover, .dropdown-item:focus {
        color: #16181b;
        text-decoration: none;
        background-color: #eeeeee;
    }

    .dropdown-item.active, .dropdown-item:active {
        color: #fff;
        text-decoration: none;
        background-color: #007bff;
    }

    .dropdown-item.disabled, .dropdown-item:disabled {
        color: #6c757d;
        background-color: transparent;
    }

    .dropdown-menu-right .dropdown-item {
        right: auto;
    }
</style>

<script type="text/x-template" id="notifications-template">
    <div class="list-group notifications-list">
        <div v-if="newNotifications.length > 0" class="list-group-item notifications-list-title">
            Nieuwe meldingen
        </div>
        <notification v-for="notification in newNotifications" :notification="notification" :show-filters="showFilters" :view-notification-url="viewNotificationUrl"></notification>
        <div class="list-group-item notifications-list-title">
            Eerdere meldingen
        </div>
        <notification v-for="notification in previousNotifications" :notification="notification" :show-filters="showFilters" :view-notification-url="viewNotificationUrl"></notification>
        <div v-if="previousNotifications.length == 0" class="list-group-item text-center" style="display: block">
            Geen meldingen
        </div>
    </div>
</script>

<script type="text/x-template" id="notification-template">
    <div class="list-group-item"
         v-bind:class="{ 'unread-notification': !notification.isRead }">
        <a class="notification-description" :href="getNotificationUrl(notification)" target="_blank">
            <div v-html="notification.message"></div>
            <div class="notification-timestamp"><span
                        class="fa fa-clock-o"></span> {{ '{{ notification.time }}' }}</div>
        </a>
        <div class="notification-actions" v-if="showFilters">
            <div>
                <b-dropdown class="actions-menu" right variant="link" size="lg" no-caret>
                    <template slot="button-content">
                        ...
                    </template>
                    <b-dropdown-item v-for="filter in notification.filters"><span
                                v-html="filter.message"></span></b-dropdown-item>
                </b-dropdown>
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">
    (function () {

        Vue.component('notification', {
            template: '#notification-template',
            props: {
                notification: Object,
                showFilters: Boolean,
                viewNotificationUrl: String
            },
            methods: {
                getNotificationUrl: function(notification) {
                    return this.viewNotificationUrl.replace('__NOTIFICATION_ID__', notification.id);
                }
            }
        });

        Vue.component('notifications-list', {
            template: '#notifications-template',
            props: {
                showFilters: Boolean,
                scrollDetectorElement: String,
                retrieveNotificationsUrl: String,
                viewNotificationUrl: String,
                notificationsPerPage: {
                    type: Number,
                    default: 15
                }
            },
            data: function () {
                return {
                    notifications: [],
                    isLoading: false,
                    offset: 0,
                    complete: false
                };
            },
            computed: {
                newNotifications: function () {
                    return this.notifications.filter(function (notification) {
                        return notification.isNew;
                    })
                }
                ,
                previousNotifications: function () {
                    return this.notifications.filter(function (notification) {
                        return !notification.isNew;
                    })
                }
            },
            methods: {
                loadData: function() {
                    if(this.complete) {
                        return;
                    }

                    var vueInstance = this;
                    this.isLoading = true;

                    var parameters = new FormData();
                    parameters.append('offset', this.offset);
                    parameters.append('notificationsPerPage', this.notificationsPerPage);

                    this.$http.post(this.retrieveNotificationsUrl, parameters).then(function(result) {
                        var newNotifications = result.body;

                        newNotifications.forEach(function(notification) {
                            vueInstance.notifications.push(notification)
                        });

                        vueInstance.isLoading = false;
                        vueInstance.offset += vueInstance.notificationsPerPage;

                        if(newNotifications.length < vueInstance.notificationsPerPage) {
                            vueInstance.complete = true;
                        }
                    })
                }
            },
            mounted: function () {
                this.loadData();

                var vueInstance = this;
                var isWindow = false;

                if(this.scrollDetectorElement === 'window') {
                    this.scrollDetectorElement = window;
                    isWindow = true;
                }

                if(this.scrollDetectorElement) {
                    $(this.scrollDetectorElement).on('scroll', function() {
                        if(vueInstance.isLoading) {
                            return;
                        }

                        var scrollTop = isWindow ? window.scrollY : $(this).scrollTop();
                        var divHeight = isWindow ? document.body.offsetHeight : $(this)[0].scrollHeight;
                        var containerHeight = isWindow ? window.innerHeight : $(this)[0].clientHeight;

                        if((scrollTop + containerHeight) >= (divHeight - 5)) {
                            vueInstance.loadData();
                            console.log('loadData' + vueInstance.scrollDetectorElement);
                        }
                    });
                }
            }
        });
    })();
</script>