{% set appContext = 'Chamilo\\Core\\Group' %}

{{ getJavascript('Plugin/VueJS/vue.js', 'Chamilo\\Libraries') }}
{{ getJavascript('Plugin/VueJS/polyfill.min.js', 'Chamilo\\Libraries') }}
{{ getJavascript('Plugin/VueJS/BootstrapVue/bootstrap-vue.js', 'Chamilo\\Libraries') }}
{{ getJavascript('Plugin/VueJS/VueResource/vue-resource.min.js', 'Chamilo\\Libraries') }}

{{ getCss('Plugin/VueJS/BootstrapVue/bootstrap-vue.min.css', 'Chamilo\\Configuration') }}
{{ getCss('../../Javascript/Plugin/Fancytree/dist/skin-awesome/ui.fancytree.min.css', 'Chamilo\\Libraries') }}

<style>
    .selected-parent-groups {
        margin-bottom: 10px;
    }

    .group-title {
        margin-left: 10px;
    }

    table.fancytree-container tbody tr td,
    table.fancytree-container thead tr th {
        padding: 10px 17px;
    }

    .fancytree-icon,
    .fancytree-checkbox {
        font-size: 15px;
    }

    .selected-platform-groups {
        margin-left: -5px;
        margin-top: 20px;
    }

    .selected-platform-group {
        margin: 0 5px;
        padding: 6px;
        background-color: #17a2b8;
        border-radius: 4px;
        color: white;
    }

    .deselect-node {
        margin-left: 10px;
        cursor: pointer;
    }

    .fancytree-clickable {
        cursor: pointer;
    }
</style>

<script type="text/x-template" id="platform-group-selector-template">
    <div>
        <table id="platform-group-tree" class="table table-striped fancytree-colorize-selected">
            <colgroup>
                <col width="30px"></col>
                <col width="*"></col>
                <col width="*"></col>
            </colgroup>
            <thead>
            <tr>
                <th></th>
                <th>{{ 'Name'|trans({}, 'Chamilo\\Core\\Group') }}</th>
                <th>{{ 'Code'|trans({}, 'Chamilo\\Core\\Group') }}</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td></td>
                <td class="fancytree-clickable"></td>
                <td></td>
            </tr>
            </tbody>
        </table>

        <div class="selected-platform-groups">
            <span class="selected-platform-group" v-for="group in selectedGroups">
                {{ '{{ group.name }} ({{  group.code }})' }} <span @click="deselectGroup(group)" class="fa fa-times deselect-node"></span>
            </span>
        </div>
    </div>
</script>

<script type="application/javascript">
    (function () {
        Vue.component('platform-group-selector', {
            template: '#platform-group-selector-template',
            data: function() {
                return {
                    selectedGroups: []
                }
            },
            methods: {
                deselectGroup: function (selectedGroup) {
                    var vueInstance = this;
                    var node = $('#platform-group-tree').fancytree('getTree').getNodeByKey(selectedGroup.id);

                    if(node) {
                        node.setSelected(false);
                    } else {
                        var index = vueInstance.selectedGroups.indexOf(selectedGroup);
                        if(index !== false) {
                            vueInstance.selectedGroups.splice(index, 1);
                        }
                    }
                }
            },
            props: {
                platformGroups: Array,
                defaultSelectedGroups: Array,
                getGroupChildrenUrl: String

            },
            mounted: function () {
                var vueInstance = this;

                if(vueInstance.defaultSelectedGroups) {
                    vueInstance.defaultSelectedGroups.forEach(function(group) {
                        vueInstance.selectedGroups.push(group);
                    });
                }

                var convertData = function (groups) {
                    var treeData = [];

                    groups.forEach(function (group) {
                        var selectedGroupIndex = vueInstance.selectedGroups.findIndex(function(selectedGroup) {
                            return selectedGroup.id === group.id;
                        });

                        var isSelected = selectedGroupIndex > -1;

                        treeData.push({
                            title: group.name,
                            key: group.id,
                            folder: true,
                            lazy: group.has_children,
                            code: group.code,
                            selectedLabel: group.name + ' (' + group.code + ') ',
                            originalGroup: group,
                            selected: isSelected
                        });
                    });
                    return treeData;
                };

                $('#platform-group-tree').fancytree({
                    source: function (event, data) {
                        return vueInstance.platformGroups;
                    },
                    lazyLoad: function (event, data) {
                        data.result = {
                            url: vueInstance.getGroupChildrenUrl,
                            data: {'groupId': data.node.key},
                            cache: false,
                            method: 'POST'
                        };
                    },
                    postProcess: function (event, data) {
                        data.result = convertData(data.response);
                    },
                    checkbox: true,
                    selectMode: 2,
                    glyph: {
                        preset: 'awesome4',
                        map: {}
                    },
                    extensions: ['glyph', 'table'],
                    table: {
                        checkboxColumnIdx: 0,
                        nodeColumnIdx: 1,
                        indentation: 30
                    },
                    renderColumns: function (event, data) {
                        var node = data.node;
                        var $tdList = $(node.tr).find(">td");

                        $tdList.eq(2).text(node.data.code);
                    },
                    select: function (event, data) {
                        var group = data.node.data.originalGroup;

                        if(data.node.selected) {
                            vueInstance.selectedGroups.push(group);
                        } else {
                            var index = vueInstance.selectedGroups.indexOf(group);
                            if(index !== false) {
                                vueInstance.selectedGroups.splice(index, 1);
                            }
                        }

                        vueInstance.$emit('selection-changed', vueInstance.selectedGroups);

                    },
                    clickFolderMode: 2,
                    icon: false
                });


            }
        });
    })();
</script>
